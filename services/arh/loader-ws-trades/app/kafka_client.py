# app/kafka_client.py

import json
import ssl
from typing import AsyncGenerator
from loguru import logger
from aiokafka import AIOKafkaProducer, AIOKafkaConsumer

from app import config

class KafkaProducerClient:
    def __init__(self):
        self.producer = None

    async def start(self):
        self.producer = AIOKafkaProducer(
            bootstrap_servers=config.KAFKA_BOOTSTRAP_SERVERS,
            sasl_mechanism="SCRAM-SHA-512",
            security_protocol="SASL_SSL",
            sasl_plain_username=config.KAFKA_USER_PRODUCER,
            sasl_plain_password=config.KAFKA_PASSWORD_PRODUCER,
            ssl_context=config.get_ssl_context()
        )
        await self.producer.start()
        logger.info("‚úÖ KafkaProducerClient –∑–∞–ø—É—â–µ–Ω")

    async def send_json(self, topic: str, data: dict):
        if not self.producer:
            raise RuntimeError("Producer –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        try:
            encoded = json.dumps(data).encode("utf-8")
            await self.producer.send_and_wait(topic, encoded)
            logger.debug(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Kafka ({topic}): {data}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Kafka: {e}")

    async def stop(self):
        if self.producer:
            await self.producer.stop()
            logger.info("üõë KafkaProducerClient –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


class KafkaControlListener:
    def __init__(self, queue_id: str):
        self.queue_id = queue_id
        self.consumer = None

    async def start(self):
        self.consumer = AIOKafkaConsumer(
            config.CONTROL_TOPIC,
            bootstrap_servers=config.KAFKA_BOOTSTRAP_SERVERS,
            group_id=f"{self.queue_id}-control-group",
            enable_auto_commit=True,
            sasl_mechanism="SCRAM-SHA-512",
            security_protocol="SASL_SSL",
            sasl_plain_username=config.KAFKA_USER_CONSUMER,
            sasl_plain_password=config.KAFKA_PASSWORD_CONSUMER,
            ssl_context=config.get_ssl_context(),
            auto_offset_reset="latest"
        )
        await self.consumer.start()
        logger.info("üéß KafkaControlListener –∑–∞–ø—É—â–µ–Ω")

    async def listen(self) -> AsyncGenerator[dict, None]:
        if not self.consumer:
            logger.error("Consumer –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return

        try:
            async for msg in self.consumer:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ (tombstone)
                if not msg.value:
                    logger.debug("üï≥Ô∏è –ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (tombstone), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                    continue

                try:
                    data = json.loads(msg.value.decode("utf-8"))
                except json.JSONDecodeError:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è Kafka: {msg.value}")
                    continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

                # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ queue_id
                if data.get("queue_id") == self.queue_id:
                    logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–≤–æ–µ–π –æ—á–µ—Ä–µ–¥–∏: {data}")
                    yield data
                else:
                    # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –≤ debug
                    logger.debug(f"üîï –ü—Ä–æ–ø—É—â–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥—Ä—É–≥–æ–π –æ—á–µ—Ä–µ–¥–∏: {data.get('queue_id')}")

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ KafkaControlListener: {e}", exc_info=True)
            # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, –º–æ–∂–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            raise

    async def stop(self):
        if self.consumer:
            await self.consumer.stop()
            logger.info("üõë KafkaControlListener –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
